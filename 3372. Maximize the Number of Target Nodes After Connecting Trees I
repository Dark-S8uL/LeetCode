class Solution {
public:
    int dfs(int s, int p, int k, vector<vector<int>>& adj) {
        if(k < 0) return 0 ;
        int cnt = 1 ;
        for(int x : adj[s]) {
            if(x != p) cnt += dfs(x, s, k-1, adj) ;
        }
        return cnt ;
    }
    vector<int> maxTargetNodes(vector<vector<int>>& edges1, vector<vector<int>>& edges2, int k) {
        int m = edges1.size()+1, n = edges2.size()+1 ;
        vector<vector<int>> adj1(m), adj2(n) ;
        for(auto& edge : edges1) {
            int u = edge[0], v = edge[1] ;
            adj1[u].push_back(v) ;
            adj1[v].push_back(u) ;
        }
        for(auto& edge : edges2) {
            int u = edge[0], v = edge[1] ;
            adj2[u].push_back(v) ;
            adj2[v].push_back(u) ;
        }
        vector<int> v(m) ;
        int maxi = 0 ;
        for(int i = 0; i < n; i++) maxi = max(maxi, dfs(i, -1, k-1, adj2)) ;
        for(int i = 0; i < m; i++) v[i] = maxi + dfs(i, -1, k, adj1) ;
        return v ;
    }
};
