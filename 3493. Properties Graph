class Solution {
public:
    int intersect(vector<int>& a, vector<int>& b) {
        unordered_map<int, int> mp ;
        for(int e : a) mp[e]++ ;
        int c = 0 ;
        for(int e : b) {
            if(mp.count(e)) {
                c++ ;
                mp.erase(e) ;
            }
        }
        return c ;
    }
    void dfs(int s, vector<vector<int>>& adj, vector<bool>& vis) {
        vis[s] = true ;
        for(int x : adj[s]) {
            if(!vis[x]) dfs(x, adj, vis) ;
        }
    }
    int numberOfComponents(vector<vector<int>>& p, int k) {
        int n = p.size(), m = p[0].size() ;
        vector<vector<int>> adj(n) ;
        for(int i = 0; i < n; i++) {
            for(int j = i+1; j < n; j++) {
                if(intersect(p[i], p[j]) >= k) {
                    adj[i].push_back(j) ;
                    adj[j].push_back(i) ;
                }
            }
        }
        int cnt = 0 ;
        vector<bool> vis(n, false) ;
        for(int i = 0; i < n; i++) {
            if(vis[i]) continue ;
            dfs(i, adj, vis) ;
            cnt++ ;
        }
        return cnt ;
    }
};
