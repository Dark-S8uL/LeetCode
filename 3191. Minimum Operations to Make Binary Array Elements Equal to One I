# Appraoch 01 :

class Solution {
public:
    int minOperations(vector<int>& nums) {
        int n = nums.size() ;
        int cnt = 0 ;
        for(int i = 0; i < n-2; i++){
            if(nums[i] == 0) {
                nums[i] ^= 1 ;
                nums[i + 1] ^= 1 ;
                nums[i + 2] ^= 1 ;
                cnt++ ;
            }
        }
        for(int i = n-2; i < n; i++){
            if(nums[i] == 0) return -1 ;
        }
        return cnt ;
    }
};

-----------------------------------------------------------------------
# Approach 02 :

class Solution {
public:
    int minOperations(vector<int>& nums) {
        int n = nums.size() ;
        queue<int> q ;
        int flip = 0, cnt = 0 ;
        for (int i = 0; i <= n - 3; i++) {
            if (!q.empty() && q.front() == i) {
                q.pop() ;
                flip ^= 1 ;
            }
            if ((nums[i] ^ flip) == 0) { 
                cnt++;
                flip ^= 1 ;
                q.push(i + 3) ;
            }
        }
        for (int i = n - 2; i < n; i++) {
            if (!q.empty() && q.front() == i) {
                q.pop() ;
                flip ^= 1 ;
            }
            if ((nums[i] ^ flip) == 0) return -1 ;
        }
        return cnt;
    }
};
