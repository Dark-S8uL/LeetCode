class Solution {
public:
    long long minimumDifference(vector<int>& nums) {
        int n = nums.size() ;
        int m = n / 3 ;
        priority_queue<int, vector<int>, greater<>> pq1 ;
        priority_queue<int> pq2 ;
        vector<long long> pref(n, 0), suff(n, 0) ;
        long long sum = 0 ;
        for(int i = 0; i < n; i++) {
            pq2.push(nums[i]) ;
            sum += nums[i] ;
            if(pq2.size() > m) {
                sum -= pq2.top() ;
                pq2.pop() ;
            }
            if(i >= m-1) pref[i] = sum ;
        }
        sum = 0 ;
        for(int i = n-1; i >= 0; i--) {
            pq1.push(nums[i]) ;
            sum += nums[i] ;
            if(pq1.size() > m) {
                sum -= pq1.top() ;
                pq1.pop() ;
            }
            if(i <= 2*m) suff[i] = sum ;
        }
        long long mini = LLONG_MAX ;
        for(int i = m-1; i < 2*m; i++) {
            mini = min(mini, pref[i] - suff[i+1]) ;
        }
        return mini ;
    }
};
