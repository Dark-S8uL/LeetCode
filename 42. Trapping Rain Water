# Approach 01 :

class Solution {
public:
    int trap(vector<int>& ht) {
        int n = ht.size() ;
        if (n == 0) return 0 ;
        int i = 0, j = n-1 ;
        int l = ht[i], r = ht[j] ;
        int w = 0 ;
        while(i < j) {
            if(l < r) {
                i++ ;
                l = max(l, ht[i]) ;
                w += l - ht[i] ;
            } else {
                j-- ;
                r = max(r, ht[j]) ;
                w += r - ht[j] ;
            }
        }
        return w ;
    }
};

-------------------------------------------------------------------
# Approach 02 :

class Solution {
public:
    int trap(vector<int>& ht) {
        int n = ht.size() ;
        if (n == 0) return 0 ;
        vector<int> l(n), r(n) ;
        l[0] = ht[0] ;
        for(int i = 1; i < n; i++) l[i] = max(l[i-1], ht[i]) ;
        r[n-1] = ht[n-1] ;
        for(int i = n-2; i >= 0; i--) r[i] = max(r[i+1], ht[i]) ;
        int w = 0 ;
        for(int i = 0; i < n; i++) {
            w += min(l[i], r[i]) - ht[i] ;
        }
        return w ;
    }
};
