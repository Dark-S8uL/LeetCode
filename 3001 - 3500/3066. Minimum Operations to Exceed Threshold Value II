# Approach 01 :

class Solution {
public:
    int minOperations(vector<int>& nums, int k) {
        priority_queue<long long, vector<long long>, greater<long long>> pq(nums.begin(), nums.end()) ;
        int cnt = 0 ;
        while(true) {
            long a = pq.top() ;
            pq.pop() ;
            long b = pq.top() ;
            pq.pop() ;
            if(a >= k && b >= k) break ;
            pq.push(min(a, b) * 2 + max(a, b)) ;
            cnt++ ;
        }
        return cnt ;
    }
};

-------------------------------------------------------------------------------------------------------------
# Approach 02 :

class Solution {
public:
    int minOperations(vector<int>& nums, int k) {
        priority_queue<long long, vector<long long>, greater<long long>> pq(nums.begin(), nums.end()) ;
        int cnt = 0 ;
        while(pq.top() < k) {
            long long a = pq.top() ;
            pq.pop() ;
            long long b = pq.top() ;
            pq.pop() ;
            pq.push(a * 2 + b) ;
            cnt++ ;
        }
        return cnt ;
    }
};
