# Approach 01 :

class Solution {
public:
    int longestMonotonicSubarray(vector<int>& nums) {
        int n = nums.size() ;
        int maxLen = 1 ;
        for(int i = 0; i < n-1; i++) {
            int l = 0 ;
            for(int j = i+1; j < n; j++) {
                if(nums[j-1] < nums[j]) l++ ;
                else break ;
            }
            maxLen = max(maxLen, l+1) ;
        }
        for(int i = 0; i < n-1; i++) {
            int l = 0 ;
            for(int j = i+1; j < n; j++) {
                if(nums[j-1] > nums[j]) l++ ;
                else break ;
            }
            maxLen = max(maxLen, l+1) ;
        }
        return maxLen ;
    }
};

-------------------------------------------------------------------------------------
# Approach 02 :

class Solution {
public:
    int longestMonotonicSubarray(vector<int>& nums) {
        int n = nums.size() ;
        int maxLen = 1 ;
        int inc = 1, dec = 1 ;
        for (int i = 1; i < n; i++) {
            if (nums[i] > nums[i - 1]) {
                inc++ ;
                dec = 1 ;
            } else if (nums[i] < nums[i - 1]) {
                dec++ ;
                inc = 1 ;
            } 
            else inc = dec = 1 ;
            maxLen = max(maxLen, max(inc, dec)) ;
        }
        return maxLen ;
    }
};
