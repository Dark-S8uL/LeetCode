class Solution {
public:
    bool check(int i, int j, vector<vector<char>>& board) {
        for(int k = 0; k < 9; k++) {
            if(k != j && board[i][k] == board[i][j]) return false ;
        }
        for(int k = 0; k < 9; k++) {
            if(k != i && board[k][j] == board[i][j]) return false ;
        }
        return true ;
    }
    bool checkSub(int i, int j, vector<vector<char>>& board) {
        unordered_map<char, int> mp ;
        for(int k = i; k < i+3; k++) {
            for(int l = j; l < j+3; l++) {
                if(board[k][l] != '.') mp[board[k][l]]++ ;
            }
        }
        for(auto& pair : mp) {
            if(pair.second > 1) return false ;
        }
        return true ;
    }
    bool isValidSudoku(vector<vector<char>>& board) {
        for(int i = 0; i < 9; i++) {
            for(int j = 0; j < 9; j++) {
                if(board[i][j] != '.') {
                    if(!check(i, j, board)) return false ;
                }
            }
        }
        for(int i = 0; i < 9; i++) {
            for(int j = 0; j < 9; j++) {
                if((i % 3 == 0) && (j % 3 == 0)) {
                    if(!checkSub(i, j, board)) return false ;
                }
            }
        }
        return true ;
    }
};
