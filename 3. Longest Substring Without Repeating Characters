Approach #1 :

class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        int n = s.length() ;
        if(n <= 1) return n ;
        unordered_map<char, int> mp ;
        int i = 0, j = 0 ;
        int maxLen = 0 ;
        while(j < n){
            if(mp.find(s[j]) == mp.end()){
                mp[s[j]]++ ;
            } else {
                mp[s[j]]++ ;
                while(mp[s[j]] > 1){
                    mp[s[i]]-- ;
                    i++ ;
                }
            }
            maxLen = max(maxLen, j - i + 1) ;
            j++ ;
        }
        return maxLen ;
    }
};

-------------------------------------------------------------
Approach #2 :

class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        if(s.empty()) return 0;
        vector<int> v(256, -1);
        int start = 0, maxLen = 0;
        for(int i = 0; i < s.size(); i++) {
            start = max(start, v[s[i]] + 1);
            v[s[i]] = i;
            maxLen = max(maxLen, i - start + 1);
        }
        return maxLen;
    }
};
