/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Codec {
public:
    string s = "" ;
    void serialized(TreeNode* root) {
        if(!root) return ;
        s += to_string(root->val) + "-" ;
        serialized(root->left) ;    
        serialized(root->right) ;    
    }
    // Encodes a tree to a single string.
    string serialize(TreeNode* root) {
        if(!root) return "" ;
        serialized(root) ;
        return s ;  
    }

    TreeNode* insertBST(TreeNode* node, int key) {
        if(!node) return new TreeNode(key) ;
        if(key < node->val) node->left = insertBST(node->left, key) ;
        if(key > node->val) node->right = insertBST(node->right, key) ;
        return node ;
    }
    // Decodes your encoded data to tree.
    TreeNode* deserialize(string data) {
        int n = data.length() ;
        TreeNode* root = NULL ;
        if(n == 0) return root ;
        int i = 0 ;
        string s = "" ;
        while(i < n && data[i] != '-') s += data[i++] ;
        i++ ;
        root = new TreeNode(stoi(s)) ;
        for(; i < n; i++) {
            s = "" ;
            while(i < n && data[i] != '-') s += data[i++] ;
            if(!s.empty()) {
                int key = stoi(s) ;
                insertBST(root, key) ;
            }
        }
        return root ;
    }
};

// Your Codec object will be instantiated and called as such:
// Codec* ser = new Codec();
// Codec* deser = new Codec();
// string tree = ser->serialize(root);
// TreeNode* ans = deser->deserialize(tree);
// return ans;
