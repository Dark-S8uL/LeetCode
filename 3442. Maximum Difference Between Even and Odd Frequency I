# Approach 01 : 
class Solution {
public:
    int maxDifference(string s) {
        int n = s.length() ;
        unordered_map<int, int> mp ;
        for(char c : s) mp[c]++ ;
        int diff = INT_MIN ;
        for(auto& pair1 : mp) {
            if(pair1.second % 2 != 0) {
                for(auto& pair2 : mp) {
                    if(pair2.second % 2 == 0) diff = max(diff, pair1.second - pair2.second) ;
                }
            }
        }
        return diff ;
    }
};

------------------------------------------------------------------------------------------------------
# Approach 02 : 

class Solution {
public:
    int maxDifference(string s) {
        int n = s.length() ;
        sort(s.begin(), s.end()) ;
        int minE = INT_MAX, maxO = INT_MIN ;
        int cnt = 1 ;
        char c = s[0] ;
        for(int i = 1; i < n; i++) {
            if(c == s[i]) cnt++ ;
            else {
                if(cnt % 2 == 0) minE = min(minE, cnt) ;
                else maxO = max(maxO, cnt) ;
                cnt = 1 ;
                c = s[i] ;
            }
        }
        if(cnt % 2 == 0) minE = min(minE, cnt) ;
        else maxO = max(maxO, cnt) ;
        return maxO - minE ;
    }
};
