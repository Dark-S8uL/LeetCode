# Approach 01 : 

class Solution {
public:
    bool divideArray(vector<int>& nums) {
        int n = nums.size() ;
        unordered_map<int, int> mp ;
        for(int num : nums) mp[num]++ ;
        for(auto& pair : mp) {
            if(pair.second % 2 == 1) return false ;
        }
        return true ;
    }
};

--------------------------------------------------------------------------
# Approach 02 :

class Solution {
public:
    bool divideArray(vector<int>& nums) {
        int n = nums.size() ;
        sort(nums.begin(), nums.end()) ;
        int dup = nums[0], cnt = 1 ;
        for(int i = 1; i < n; i++) {
            if(dup == nums[i]) cnt++ ;
            else {
                if(cnt % 2 == 1) return false ;
                cnt = 1 ;
                dup = nums[i] ;
            }
        }
        if(cnt % 2 == 1) return false ;
        return true ;
    }
};
