class Solution {
public:
    int closestMeetingNode(vector<int>& edges, int node1, int node2) {
        int n = edges.size() ;
        vector<int> d1(n, INT_MAX), d2(n, INT_MAX) ;
        d1[node1] = 0 ; d2[node2] = 0 ;
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<>> pq ;
        pq.push({0, node1}) ;
        while(!pq.empty()) {
            auto [d, u] = pq.top() ; pq.pop() ;
            if(edges[u] != -1) {
                if(d1[edges[u]] > d1[u]+1) {
                    d1[edges[u]] = d1[u] + 1 ;
                    pq.push({d+1, edges[u]}) ;
                }
            }
        }
        while(!pq.empty()) pq.pop() ;
        pq.push({0, node2}) ;
        while(!pq.empty()) {
            auto [d, u] = pq.top() ; pq.pop() ;
            if(edges[u] != -1) {
                if(d2[edges[u]] > d2[u]+1) {
                    d2[edges[u]] = d2[u] + 1 ;
                    pq.push({d+1, edges[u]}) ;
                }
            }
        }
        int ans = -1, mini = INT_MAX ;
        for(int i = 0; i < n; i++) {
            int maxi = max(d1[i], d2[i]) ;
            if(maxi < mini) {
                mini = maxi ;
                ans = i ;
            }
        }
        return ans ;
    }
};
