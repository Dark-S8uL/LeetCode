# Approach 01 :

class Solution {
public:
    bool reorderedPowerOf2(int n) {
        string s = to_string(n) ;
        sort(s.begin(), s.end()) ;
        for(int bit = 0; bit < 31; bit++) {
            int p = 1 << bit ;
            string t = to_string(p) ;
            sort(t.begin(), t.end()) ;
            if(s == t) return true ;
        }
        return false ;
    }
};

--------------------------------------------------------------

# Approach 02 : 

class Solution {
public:
    bool reorderedPowerOf2(int n) {
        string s = to_string(n) ;
        sort(s.begin(), s.end()) ;
        do {
            if(s[0] == '0') continue ;
            int a = stoi(s) ;
            cout << (a & (a-1)) << " " ;
            if(a > 0 && (a & (a-1)) == 0) return true ;
        } while(next_permutation(s.begin(), s.end())) ;
        return false ;
    }
};
