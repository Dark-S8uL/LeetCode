class Solution {
public:
    unordered_map<int, set<int>> mp ;
    void dfs(int s, vector<vector<int>>& adj, int id, vector<int>& vis, vector<int>& ids) {
        vis[s] = 1 ;
        ids[s] = id ;
        mp[id].insert(s) ;
        for(int x : adj[s]) {
            if(!vis[x]) dfs(x, adj, id, vis, ids) ;
        }
    }
    vector<int> processQueries(int c, vector<vector<int>>& conn, vector<vector<int>>& queries) {
        vector<vector<int>> adj(c+1) ;
        for(auto& con : conn) {
            int u = con[0], v = con[1] ;
            adj[u].push_back(v) ;
            adj[v].push_back(u) ;
        }
        vector<int> vis(c+1, 0), ids(c+1) ;
        for(int i = 1; i <= c; i++) {
            if(!vis[i]) dfs(i, adj, i, vis, ids) ;
        }
        vector<int> v ;
        for(auto& q : queries) {
            int a = q[0], x = q[1] ;
            int id = ids[x] ;
            if(a == 1) {
                if(mp[id].count(x)) v.push_back(x) ;
                else if(mp[id].size() != 0) v.push_back(*mp[id].begin()) ;
                else v.push_back(-1) ;
            } else {
                if(mp[id].count(x)) mp[id].erase(x) ;
            }
        }
        return v ;
    }
};
