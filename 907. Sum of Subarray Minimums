class Solution {
public:
    int mod = 1e9 + 7 ;
    int sumSubarrayMins(vector<int>& arr) {
        int n = arr.size() ;
        vector<int> aft(n, n), bef(n, -1) ;
        stack<int> st ;
        for(int i = n-1; i >= 0; i--) {
            while(!st.empty() && arr[st.top()] > arr[i]) st.pop() ;
            if(!st.empty()) aft[i] = st.top() ;
            st.push(i) ;
        }
        stack<int>().swap(st) ;
        for(int i = 0; i < n; i++) {
            while(!st.empty() && arr[st.top()] >= arr[i]) st.pop() ;
            if(!st.empty()) bef[i] = st.top() ;
            st.push(i) ;
        }
        long long sum = 0 ;
        for(int i = 0; i < n; i++) {
            long long l = i - bef[i] ;
            long long r = aft[i] - i ;
            long long t = l * r * arr[i] ;
            sum = (sum + t) % mod ;
        }
        return sum ;
    }
};
