/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int minSwapToSort(vector<int>& v){
        int swaps = 0 ;
        vector<int> sortedV(v.begin(), v.end()) ;
        sort(sortedV.begin(), sortedV.end()) ;
        unordered_map<int, int> mp ;
        for(int i = 0; i < v.size(); i++) mp[v[i]] = i ;
        for(int i = 0; i < v.size(); i++){
            if(v[i] == sortedV[i]) continue ;
            int idx = mp[sortedV[i]] ;
            mp[v[i]] = idx ;
            mp[v[idx]] = i ;
            swap(v[idx], v[i]) ;
            swaps++ ;
        }
        return swaps ;
    }
    int minimumOperations(TreeNode* root) {
        queue<TreeNode*> q;
        q.push(root);
        int minOpr = 0 ;
        while(!q.empty()) {
            int n = q.size() ;
            vector<int> v ;
            while(n--){
                TreeNode* node = q.front();
                q.pop();
                v.push_back(node->val);
                if (node->left) q.push(node->left);
                if (node->right) q.push(node->right);
            }
            minOpr += minSwapToSort(v) ;
        }
        return minOpr;
    }
};
