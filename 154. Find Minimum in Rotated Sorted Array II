class Solution {
public: 
    int solve(int i, int j, vector<int>& nums) {
        int n = nums.size() ;
        while(i < j) {
            int mid = i + (j - i) / 2 ;
            if(mid-1 >= 0 && mid+1 < n && nums[mid] < nums[mid+1] && nums[mid] < nums[mid-1]) return nums[mid] ;
            else if(nums[i] == nums[mid] && nums[mid] == nums[j]) {
                if(mid-1 >= 0 && mid+1 < n && nums[mid] < nums[mid+1] && nums[mid] < nums[mid-1]) return nums[mid] ;
                else if(mid-1 >= 0 && mid+1 < n && nums[mid] == nums[mid+1] && nums[mid] == nums[mid-1]) return min(solve(i, mid-1, nums), solve(mid+1, j, nums)) ;
                else if(mid-1 >= 0 && mid+1 < n) return nums[mid-1] < nums[mid+1] ? nums[mid-1] : nums[mid+1] ;
                else {
                    if(mid-1 >= 0) return nums[mid-1] < nums[mid] ? nums[mid-1] : nums[mid] ;
                    else if(mid+1 < n) return nums[mid] < nums[mid+1] ? nums[mid] : nums[mid+1] ;
                }
            } else if(nums[mid] > nums[i] && nums[mid] < nums[j]) return nums[i] ;
            else if(nums[i] == nums[j] && nums[mid] < nums[i]) j = mid ;
            else if(nums[mid] <= nums[j]) j = mid ;
            else i = mid+1 ;
        }
        return nums[i] ;
    }
    int findMin(vector<int>& nums) {
        int n = nums.size() ;
        if(n == 1) return nums[0] ;
        int i = 0, j = n-1 ;
        while(i < j) {
            int mid = i + (j - i) / 2 ;
            if(mid-1 >= 0 && mid+1 < n && nums[mid] < nums[mid+1] && nums[mid] < nums[mid-1]) return nums[mid] ;
            else if(nums[i] == nums[mid] && nums[mid] == nums[j]) {
                if(mid-1 >= 0 && mid+1 < n && nums[mid] < nums[mid+1] && nums[mid] < nums[mid-1]) return nums[mid] ;
                else if(mid-1 >= 0 && mid+1 < n && nums[mid] == nums[mid+1] && nums[mid] == nums[mid-1]) return min(solve(i, mid-1, nums), solve(mid+1, j, nums)) ;
                else if(mid-1 >= 0 && mid+1 < n) return nums[mid-1] < nums[mid+1] ? nums[mid-1] : nums[mid+1] ;
                else {
                    if(mid-1 >= 0) return nums[mid-1] < nums[mid] ? nums[mid-1] : nums[mid] ;
                    else if(mid+1 < n) return nums[mid] < nums[mid+1] ? nums[mid] : nums[mid+1] ;
                }
            } else if(nums[mid] > nums[i] && nums[mid] < nums[j]) return nums[i] ;
            else if(nums[i] == nums[j] && nums[mid] < nums[i]) j = mid ;
            else if(nums[mid] <= nums[j]) j = mid ;
            else i = mid+1 ;
        }
        return nums[i] ;
    }
};
