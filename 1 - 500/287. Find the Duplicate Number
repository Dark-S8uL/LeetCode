# Approach 01 :

class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        int n = nums.size() ;
        int i = 0, j = n-1 ;
        while(i < j) {
            int mid = i + (j - i) / 2 ;
            int cnt = 0 ;
            for(int num : nums) {
                if(num <= mid) cnt++ ;
            }
            if(cnt > mid) j = mid ;
            else i = mid + 1 ;
        }
        return i ;
    }
};

------------------------------------------------------------------------------
# Approach 02 :

class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        int slow = nums[0], fast = nums[0] ;
        while(true) {
            slow = nums[slow] ;
            fast = nums[nums[fast]] ;
            if (slow == fast) break ;
        }
        slow = nums[0] ;
        while (slow != fast) {
            slow = nums[slow] ;
            fast = nums[fast] ;
        }
        return slow ; 
    }
};
