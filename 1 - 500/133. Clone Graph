/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> neighbors;
    Node() {
        val = 0;
        neighbors = vector<Node*>();
    }
    Node(int _val) {
        val = _val;
        neighbors = vector<Node*>();
    }
    Node(int _val, vector<Node*> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
};
*/

class Solution {
public:
    Node* dfs(Node* s, unordered_map<Node*, Node*>& mp) {
        if(!s) return s ;
        if(mp.count(s) > 0) return mp[s] ;
        Node* node = new Node(s->val) ;
        mp[s] = node ;
        for(Node* x : s->neighbors) node->neighbors.push_back(dfs(x, mp)) ;
        return node ;
    }
    Node* cloneGraph(Node* node) {
        if(!node) return node ;
        unordered_map<Node*, Node*> mp ;
        return dfs(node, mp) ;
    }
};
