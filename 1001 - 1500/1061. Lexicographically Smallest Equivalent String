class Solution {
public:
    void dfs(char c, set<char>& vis, unordered_map<char, vector<char>>& adj, set<char>& temp) {
        vis.insert(c) ;
        temp.insert(c) ;
        for(char ch : adj[c]) {
            if(vis.find(ch) == vis.end()) dfs(ch, vis, adj, temp) ;
        }
    }
    string smallestEquivalentString(string s1, string s2, string baseStr) {
        int n = s1.length() ;
        unordered_map<char, vector<char>> adj ;
        for(int i = 0; i < n; i++) {
            adj[s1[i]].push_back(s2[i]) ;
            adj[s2[i]].push_back(s1[i]) ;
        }
        unordered_map<char, char> mp ;
        set<char> vis ;
        for(char c = 'a'; c <= 'z'; c++) {
            if(vis.find(c) == vis.end() && adj.count(c)) {
                set<char> temp ;
                dfs(c, vis, adj, temp) ;
                char ch = *min_element(temp.begin(), temp.end()) ;
                for(char p : temp) mp[p] = ch ;
            }
        }
        string s = "" ;
        for(char c : baseStr) {
            if(mp.count(c)) s += mp[c] ;
            else s += c ;
        }
        return s ;
    }
};
