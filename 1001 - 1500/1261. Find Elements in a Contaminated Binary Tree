/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class FindElements {
public:
    void inorder(TreeNode* node) {
        if(!node) return ;
        if(node->left) {
            node->left->val = 2 * node->val + 1 ;
            mp[2 * node->val + 1]++ ;
        }
        if(node->right) {
            node->right->val = 2 * node->val + 2 ;
            mp[2 * node->val + 2]++ ;
        }
        inorder(node->left) ;
        inorder(node->right) ;
    }
    FindElements(TreeNode* root) {
        if(root) {
            root->val = 0 ;
            mp[root->val]++ ;
        }
        inorder(root) ;
    }

    unordered_map<int, int> mp ;
    bool find(int target) {
        if(mp.find(target) != mp.end()) return true ;
        return false ;
    }
};

/**
 * Your FindElements object will be instantiated and called as such:
 * FindElements* obj = new FindElements(root);
 * bool param_1 = obj->find(target);
 */
