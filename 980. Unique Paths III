class Solution {
public:
    int paths = 0, z ;
    void solve(int i, int j, int m, int n, vector<vector<int>>& grid, int cnt) {
        if(i < 0 || i >= m || j < 0 || j >= n || grid[i][j] == -1) return ;
        if(grid[i][j] == 2) {
            if(cnt == z) paths++ ;
            return ;
        }
        grid[i][j] = -1 ;
        solve(i-1, j, m, n, grid, cnt+1) ;
        solve(i+1, j, m, n, grid, cnt+1) ;
        solve(i, j-1, m, n, grid, cnt+1) ;
        solve(i, j+1, m, n, grid, cnt+1) ;
        grid[i][j] = 0 ;
    }
    int uniquePathsIII(vector<vector<int>>& grid) {
        int m = grid.size(), n = grid[0].size() ;
        int r = 0, c = 0 ;
        z = 0 ;
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                if(grid[i][j] != -1) z++ ;
                if(grid[i][j] == 1) {
                    r = i ;
                    c = j ;
                }
            }
        }
        solve(r, c, m, n, grid, 1) ;
        return paths ;
    }
};
