class Solution {
public:
    const int mod = 1e9 + 7 ;
    long long modPow(long long a, long long b) {
        long long res = 1 ;
        while(b > 0) {
            if(b & 1) res = (res * a) % mod ;
            a = (a * a) % mod ;
            b >>= 1 ;
        }
        return res ;
    }
    vector<int> productQueries(int n, vector<vector<int>>& queries) {
        int m = n ;
        int c = -1 ;
        while(m) {
            c++ ;
            m /= 2 ;
        }
        vector<int> powers ;
        while(n) {
            int p = pow(2, c) ;
            if(n - p >= 0) {
                powers.push_back(p) ;
                n -= p ;
            }
            c-- ;
        }
        reverse(powers.begin(), powers.end()) ;
        m = powers.size() ;
        vector<long long> pref(m) ;
        pref[0] = powers[0] % mod ;
        for(int i = 1; i < m; i++) {
            pref[i] = (pref[i - 1] * (powers[i] % mod)) % mod ;
        }
        vector<int> ans ;
        for(auto &q : queries) {
            int st = q[0], end = q[1] ;
            if(st == 0) ans.push_back((int)pref[end]) ;
            else {
                long long inv = modPow(pref[st-1], mod - 2) ;
                ans.push_back((int)((pref[end] * inv) % mod)) ;
            }
        }
        return ans ;
    }
};
