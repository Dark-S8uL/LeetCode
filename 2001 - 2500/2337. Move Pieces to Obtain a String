Approach #1 :

class Solution {
public:
    bool canChange(string s, string t) {
        if(s == t) return true ;
        int n = s.length() ;
        int l = 0, r = 0 ;
        for(int i = 0; i < n; i++){
            if(s[i] == 'R'){
                r++ ;
                if(l != 0) return false ;
            } else if(s[i] == 'L') l-- ;
            
            if(t[i] == 'R') r-- ;
            else if(t[i] == 'L'){
                l++ ;
                if(r != 0) return false ;
            }
            if(l < 0 || r < 0) return false ;
        }
        return l == 0 && r == 0 ;
    }
};

-------------------------------------------------------------------------------------------
Approach #2 :

class Solution {
public:
    bool canChange(string s, string t) {
        if(s == t) return true ;
        int n = s.length() ;
        int i = 0, j = 0 ;
        while(i < n || j < n){
            while(i < n && s[i] == '_') i++ ;
            while(j < n && t[j] == '_') j++ ;
            if(i == n || j == n) break ;
            if(s[i] != t[j]) return false ;
            if((s[i] == 'L' && i < j) || (s[i] == 'R' && i > j)) return false ;
            i++ ;
            j++ ;
        }
        return i == n && j == n ;
    }
};
