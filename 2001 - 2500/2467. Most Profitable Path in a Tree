class Solution {
public:
    bool dfs(int time, int bob, vector<int>& bobPath, vector<int>& vis, vector<vector<int>>& adj) {
        vis[bob] = 1 ;
        if(bob == 0) {
            bobPath[bob] = time ;
            return true ;
        }
        for(int neighbor : adj[bob]) {
            if(!vis[neighbor] && dfs(time + 1, neighbor, bobPath, vis, adj)) {
                bobPath[bob] = time ;
                return true ;
            }
        }
        return false ;
    }
    int mostProfitablePath(vector<vector<int>>& edges, int bob, vector<int>& amount) {
        int n = amount.size() ;
        vector<int> bobPath(n, -1), degree(n, 0) ;
        vector<vector<int>> adj(n) ;
        for(vector<int>& edge : edges) {
            int u = edge[0], v = edge[1] ;
            adj[u].push_back(v) ;
            adj[v].push_back(u) ;
            degree[u]++ ;
            degree[v]++ ;
        }
        vector<int> vis(n, 0) ;
        dfs(0, bob, bobPath, vis, adj) ;
        queue<int> q ;
        vector<int> v(n, INT_MIN) ;
        v[0] = (bobPath[0] == 0) ? amount[0] / 2 : amount[0] ;
        q.push(0) ;
        fill(vis.begin(), vis.end(), 0);
        vis[0] = 1 ;
        int t = 1 ;
        while(!q.empty()) {
            int sz = q.size() ;
            while(sz--) {
                int node = q.front() ;
                q.pop() ;
                for(int neighbor : adj[node]) {
                    if(vis[neighbor]) continue ;
                    vis[neighbor] = 1 ;
                    if(bobPath[neighbor] == t) v[neighbor] = v[node] + amount[neighbor] / 2 ;
                    else if(bobPath[neighbor] == -1 || bobPath[neighbor] > t) v[neighbor] = v[node] + amount[neighbor] ;
                    else v[neighbor] = v[node] ;
                    q.push(neighbor) ;
                }
            }
            t++ ;
        }
        int income = INT_MIN ;
        for(int i = 1; i < n; i++) {
            if(degree[i] == 1) income = max(income, v[i]) ;
        }
        return income ;
    }
};
