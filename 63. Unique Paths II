class Solution {
public:
    int t[101][101] ;
    int solve(int i, int j, int m, int n, vector<vector<int>>& grid){
        if(i < 0 || i >= m || j < 0 || j >= n || grid[i][j] == 1) return 0 ;
        if(i == m-1 && j == n-1) return 1 ;
        if(t[i][j] != -1) return t[i][j] ;
        return t[i][j] = solve(i+1, j, m, n, grid) + solve(i, j+1, m, n, grid) ;
    }
    int uniquePathsWithObstacles(vector<vector<int>>& grid) {
        int m = grid.size(), n = grid[0].size() ;
        if(grid[0][0] == 1 || grid[m-1][n-1] == 1) return 0 ;
        memset(t, -1, sizeof(t)) ;
        return solve(0, 0, m, n, grid) ;
    }
};
