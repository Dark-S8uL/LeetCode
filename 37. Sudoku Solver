class Solution {
public:
    bool isValid(int i, int j, vector<vector<char>>& board, char val) {
        for(int k = 0; k < 9; k++) {
            if(board[i][k] == val) return false ;
        }
        for(int k = 0; k < 9; k++) {
            if(board[k][j] == val) return false ;
        }
        int r = (i / 3) * 3, c = (j / 3) * 3 ;
        for(int k = r; k < r+3; k++) {
            for(int l = c; l < c+3; l++) {
                if(board[k][l] == val) return false ;
            }
        }
        return true ;
    }
    bool solve(vector<vector<char>>& board) {
        for(int i = 0; i < 9; i++) {
            for(int j = 0; j < 9; j++) {
                if(board[i][j] == '.') {
                    for(char k = '1'; k <= '9'; k++) {
                        if(isValid(i, j, board, k)) {
                            board[i][j] = k ;
                            if(solve(board)) return true ;
                            board[i][j] = '.' ;
                        }
                    }
                    return false ;
                }
            }
        }
        return true ;
    }
    void solveSudoku(vector<vector<char>>& board) {
        solve(board) ;
    }
};
