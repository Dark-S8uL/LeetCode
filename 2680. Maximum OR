class Solution {
public:
    long long maximumOr(vector<int>& nums, int k) {
        int n = nums.size() ;
        if(n == 1) return nums[0] * pow(2, k) ;
        vector<long long> pref(n, 0), suf(n, 0) ;
        pref[0] = nums[0] ;
        for(int i = 1; i < n; i++) {
            pref[i] = pref[i-1] | nums[i] ;
        }
        suf[n-1] = nums[n-1] ;
        for(int i = n-2; i >= 0; i--) {
            suf[i] = suf[i+1] | nums[i] ;
        }
        long long maxOR = 0, oR = 0 ;
        for(int i = 0; i < n; i++) {
            long long num = nums[i] * pow(2, k) ;
            if(i == 0) oR = num | suf[i+1] ;
            else if(i == n-1) oR = num | pref[i-1] ;
            else oR = num | suf[i+1] | pref[i-1] ;
            maxOR = max(maxOR, oR) ;
        }
        return maxOR ;
    }
};
