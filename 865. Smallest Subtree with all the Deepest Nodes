/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool lca(TreeNode* node, TreeNode*& anc, unordered_set<TreeNode*>& st) {
        if(!node) return false ;
        bool l = lca(node->left, anc, st) ;
        bool r = lca(node->right, anc, st) ;
        bool root = st.count(node) ;
        if((l+root+r) >= 2) anc = node ;
        return l || root || r ;
    }
    TreeNode* subtreeWithAllDeepest(TreeNode* root) {
        if(!root->left && !root->right) return root ;
        vector<vector<TreeNode*>> v ;
        queue<TreeNode*> q ;
        q.push(root) ;
        while(!q.empty()) {
            int sz = q.size() ;
            vector<TreeNode*> temp ;
            for(int i = 0; i < sz; i++){
                TreeNode* node = q.front() ;
                q.pop() ;
                temp.push_back(node) ;
                if(node->left) q.push(node->left) ;
                if(node->right) q.push(node->right) ;
            } 
            v.push_back(temp) ;
        }
        vector<TreeNode*> t = v.back() ;
        if(t.size() == 1) return t[0] ;
        unordered_set<TreeNode*> st(t.begin(), t.end()) ;
        TreeNode* anc = NULL ;
        lca(root, anc, st) ;
        return anc ;
    }
};
