/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* recoverFromPreorder(string s) {
        int n = s.length() ;
        vector<TreeNode*> v;
        int i = 0;
        while(i < n) {
            int level = 0, data = 0;
            while(s[i] == '-') {
                i++;
                level++;
            }
            while(i < n && s[i] != '-') {
                data = data*10 + s[i] - '0';
                i++;
            }

            TreeNode* node = new TreeNode(data);
            while(v.size() > level) v.pop_back();
            if(!v.empty()) {
                if(!v.back()->left) v.back()->left = node;
                else v.back()->right = node;
            }
            v.push_back(node);
        }
        return v[0];
    }
};
