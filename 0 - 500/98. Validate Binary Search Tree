# Approach 01 :

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public: 
    bool isValid(TreeNode* root, long long mini, long long maxi) {
        if(!root) return true ;
        if(root->val <= mini || root->val >= maxi) return false ;
        return isValid(root->left, mini, root->val) && isValid(root->right, root->val, maxi) ;
    }
    bool isValidBST(TreeNode* root) {
        return isValid(root, LLONG_MIN, LLONG_MAX) ;
    }
};

----------------------------------------------------------------------------------------------------
# Approach 02 :

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public: 
    vector<int> v ;
    void inorder(TreeNode* root) {
        if(!root) return ;
        inorder(root->left) ;
        v.push_back(root->val) ;
        inorder(root->right) ;
    }
    bool isValidBST(TreeNode* root) {
        inorder(root) ;
        for(int i = 1; i < v.size(); i++) {
            if(v[i] <= v[i-1]) return false ;
        }
        return true ;
    }
};
