/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* merge(ListNode* h1, ListNode* h2) {
        ListNode dummy(0) ;
        ListNode* temp = &dummy ;
        while(h1 && h2) {
            if(h1->val <= h2->val) {
                temp->next = h1 ;
                temp = temp->next ;
                h1 = h1->next ;
            } else {
                temp->next = h2 ;
                temp = temp->next ;
                h2 = h2->next ;
            }
        }
        while(h1) {
            temp->next = h1 ;
            temp = temp->next ;
            h1 = h1->next ;
        }
        while(h2) {
            temp->next = h2 ;
            temp = temp->next ;
            h2 = h2->next ;
        }
        return dummy.next ;
    }
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        int n = lists.size() ;
        if(n == 0) return NULL ;
        ListNode *temp = lists[0] ;
        for(int i = 1; i < n; i++) {
            temp = merge(temp, lists[i]) ;
        }
        return temp ;
    }
};
