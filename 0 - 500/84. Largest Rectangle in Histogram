class Solution {
public:
    int largestRectangleArea(vector<int>& h) {
        int n = h.size() ;
        if(n == 1) return h[0] ;
        stack<int> st ;
        vector<int> bef(n, -1), aft(n, -1) ;
        for(int i = 0; i < n; i++) {
            if(!st.empty()){
                while(!st.empty() && h[st.top()] >= h[i]) st.pop() ;
                if(!st.empty()) bef[i] = st.top() ;
                st.push(i) ;
            } else st.push(i) ;
        }
        stack<int>().swap(st) ;
        for(int i = n-1; i >= 0; i--) {
            if(!st.empty()){
                while(!st.empty() && h[st.top()] >= h[i]) st.pop() ;
                if(!st.empty()) aft[i] = st.top() ;
                st.push(i) ;
            } else st.push(i) ;
        }
        int maxRect = 0 ;
        for(int i = 0; i < n; i++) {
            if(aft[i] == -1 && bef[i] == -1) maxRect = max(maxRect, n * h[i]) ;
            else if(aft[i] == -1) {
                int w = (n - i) + (i - bef[i]) - 1 ;
                maxRect = max(maxRect, w * h[i]) ;
            } else {
                int w = aft[i] - bef[i] - 1 ;
                int ht = h[i] ;
                maxRect = max(maxRect, w*ht) ;
            }
        }
        return maxRect ;
    }
};
