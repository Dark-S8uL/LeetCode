class Solution {
public:
    int merge(int l, int mid, int r, vector<int>& nums) {
        int n1 = mid-l+1, n2 = r-mid ;
        int cnt = 0 ;
        int j = mid+1 ;
        for(int i = l; i <= mid; i++) {
            while(j <= r && ((long long)nums[i] > 2LL * nums[j])) j++ ;
            cnt += j-(mid+1) ;
        }
        vector<int> temp ;
        int i = l ;
        j = mid + 1 ;
        while(i <= mid && j <= r) {
            if(nums[i] <= nums[j]) temp.push_back(nums[i++]) ;
            else temp.push_back(nums[j++]) ;
        }
        while(i <= mid) temp.push_back(nums[i++]) ;
        while(j <= r) temp.push_back(nums[j++]) ;
        for(int k = l; k <= r; k++) nums[k] = temp[k-l] ;
        return cnt ;
    }
    int mergeSort(int l, int r, vector<int>& nums) {
        int cnt = 0 ;
        if(l < r) {
            int mid = l + (r-l) / 2 ;
            cnt += mergeSort(l, mid, nums) ;
            cnt += mergeSort(mid+1, r, nums) ;
            cnt += merge(l, mid, r, nums) ;
        }
        return cnt ;
    }
    int reversePairs(vector<int>& nums) {
        int n = nums.size() ;
        return mergeSort(0, n-1, nums) ;
    }
};
