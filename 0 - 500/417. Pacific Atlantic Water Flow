class Solution {
public:
    void dfs(int i, int j, int x, int y, vector<vector<int>>& ht, vector<vector<bool>>& vis) {
        if(i < 0 || i >= ht.size() || j < 0 || j >= ht[0].size() || vis[i][j]) return ;
        if(x >= 0 && y >= 0 && ht[x][y] > ht[i][j]) return ;
        vis[i][j] = true ;
        dfs(i-1, j, i, j, ht, vis) ;
        dfs(i+1, j, i, j, ht, vis) ;
        dfs(i, j-1, i, j, ht, vis) ;
        dfs(i, j+1, i, j, ht, vis) ;
    }
    vector<vector<int>> pacificAtlantic(vector<vector<int>>& ht) {
        int m = ht.size(), n = ht[0].size() ;
        vector<vector<bool>> p(m, vector<bool>(n, false)) ;
        vector<vector<bool>> a(m, vector<bool>(n, false)) ;
        for(int i = 0; i < m; i++) {
            dfs(i, 0, -1, -1, ht, p) ;
            dfs(i, n-1, -1, -1, ht, a) ;
        }
        for(int j = 0; j < n; j++) {
            dfs(0, j, -1, -1, ht, p) ;
            dfs(m-1, j, -1, -1, ht, a) ;
        }
        vector<vector<int>> v ;
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                if(a[i][j] && p[i][j]) v.push_back({i, j}) ;
            }
        }
        return v ;
    }
};
