class Solution {
public:
    int dfs(int i, int j, vector<vector<int>>& grid) {
        int m = grid.size(), n = grid[0].size() ;
        if(i < 0 || i >= m || j < 0 || j >= n || grid[i][j] == 0) return 0 ;
        grid[i][j] = 0 ;
        int u = dfs(i-1, j, grid) ;
        int d = dfs(i+1, j, grid) ;
        int l = dfs(i, j-1, grid) ;
        int r = dfs(i, j+1, grid) ;
        return 1 + u + d + l + r ;
    }
    int maxAreaOfIsland(vector<vector<int>>& grid) {
        int m = grid.size(), n = grid[0].size() ;
        int ans = 0 ;
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                if(grid[i][j] == 1) ans = max(ans, dfs(i, j, grid)) ;
            }
        }
        return ans ;
    }
};
