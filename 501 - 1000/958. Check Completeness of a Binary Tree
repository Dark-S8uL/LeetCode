METHOD #1

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isCompleteTree(TreeNode* root) {
        if (!root) return true;
        queue<TreeNode*> q;
        q.push(root);
        bool f = false;
        while (!q.empty()) {
            TreeNode* r = q.front();
            q.pop();
            if (!r) f = true;
            else {
                if(f) return false; 
                q.push(r->left);
                q.push(r->right);
            }
        }
        return true;
    }
};

METHOD #2

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isCompleteTree(TreeNode* root) {
        queue<TreeNode*> q ;
        vector<int> v ;
        q.push(root) ;
        while(!q.empty()){
            TreeNode* r = q.front() ;
            q.pop() ;
            if(r) v.push_back(r->val) ;
            else { 
                v.push_back(-1) ;
                continue ;
            }

            if(r->left) q.push(r->left) ;
            else q.push(NULL) ;

            if(r->right) q.push(r->right) ;
            else q.push(NULL) ;
        }
        bool f = false ;
        for(int i = 0; i < v.size(); i++){
            if(v[i] != -1 && f) return false ;
            else if(v[i] == -1 && !f) f = true ;
        }
        return true ;
    }
};
