# Approach 01 :

class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
        int n = nums.size() ;
        int cnt = 0 ;
        for(int i = 0; i < n; i++) {
            int sum = 0 ;
            for(int j = i; j < n; j++) {
                sum += nums[j] ;
                if(sum == k) cnt++ ;
            }
        }
        return cnt ;
    }
};

---------------------------------------------------
# Approach 02 :

class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
        int n = nums.size() ;
        unordered_map<int, int> mp ;
        int sum = 0, cnt = 0 ;
        mp[sum] = 1 ;
        for(int num : nums) {
            sum += num ;
            if(mp.find(sum - k) != mp.end()) cnt += mp[sum - k] ;
            mp[sum]++ ;
        }
        return cnt ;
    }
};
