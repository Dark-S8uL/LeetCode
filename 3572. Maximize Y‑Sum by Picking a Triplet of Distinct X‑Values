# Approach 01 : 

class Solution {
public:
    int maxSumDistinctTriplet(vector<int>& x, vector<int>& y) {
        int n = x.size() ;
        unordered_map<int, int> mp ;
        for(int i = 0; i < n; i++) {
            if(mp.find(x[i]) != mp.end()) mp[x[i]] = max(mp[x[i]], y[i]) ;
            else mp[x[i]] = y[i] ;
        }
        priority_queue<pair<int, int>> pq ;
        for(auto& p : mp) {
            int a = p.first, b = p.second ;
            pq.push({b, a}) ;
        }
        if(pq.size() < 3) return -1 ;
        int a = pq.top().first ; pq.pop() ;
        int b = pq.top().first ; pq.pop() ;
        int c = pq.top().first ; pq.pop() ;
        return a+b+c ;
    }
};

-------------------------------------------------------------------------------
# Approach 02 : 

class Solution {
public:
    int maxSumDistinctTriplet(vector<int>& x, vector<int>& y) {
        int n = x.size() ;
        int idx1 = 0 ;
        for(int i = 1; i < n; i++) {
            if(y[idx1] < y[i]) idx1 = i ;
        }
        int idx2 = -1 ;
        for(int i = 0; i < n; i++) {
            if((x[idx1] != x[i]) && (idx2 == -1 || y[idx2] < y[i])) idx2 = i ;
        }
        int idx3 = -1 ;
        for(int i = 0; i < n; i++) {
            if((x[idx1] != x[i] && x[idx2] != x[i]) && (idx3 == -1 || y[idx3] < y[i])) idx3 = i ;
        }
        if(idx2 == -1 || idx3 == -1) return -1 ;
        return y[idx1] + y[idx2] + y[idx3] ;
    }
};
