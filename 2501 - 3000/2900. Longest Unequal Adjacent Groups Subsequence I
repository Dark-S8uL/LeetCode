# Approach 01 :

class Solution {
public:
    vector<string> getLongestSubsequence(vector<string>& w, vector<int>& g) {
        int n = w.size() ;
        vector<int> idx ;
        int prev = g[0] ;
        idx.push_back(0) ;
        for(int i = 1; i < n; i++) {
            if(g[i] != prev) {
                idx.push_back(i) ;
                prev = g[i] ;
            }
        }
        vector<string> strs ;
        for(int i = 0; i < idx.size(); i++) {
            strs.push_back(w[idx[i]]) ;
        }
        return strs ;
    }
};

-----------------------------------------------------------------------------------
# Approach 02 :

class Solution {
public:
    vector<string> getLongestSubsequence(vector<string>& w, vector<int>& g) {
        int n = w.size() ;
        vector<int> v(n, 1), prev(n, -1) ;
        int len = 1, idx = 0 ;
        for(int i = 1; i < n; i++) {
            for(int j = 0; j < i; j++) {
                if(g[i] != g[j] && v[i] < v[j]+1) {
                    v[i] = v[j] + 1 ;
                    prev[i] = j ;
                }
            }
            if(v[i] > len) {
                len = v[i] ;
                idx = i ;
            }
        }
        vector<string> strs ;
        while(idx != -1) {
            strs.push_back(w[idx]) ;
            idx = prev[idx] ;
        }
        reverse(strs.begin(), strs.end()) ;
        return strs ;
    }
};
