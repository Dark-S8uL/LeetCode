class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        int m = grid.size(), n = grid[0].size() ;
        queue<pair<int, int>> q ;
        int all = 0 ;
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                if(grid[i][j] != 0) all++ ;
                if(grid[i][j] == 2) q.push({i, j}) ;
            }
        }
        vector<vector<int>> dir = {{-1, 0}, {0, 1}, {1, 0}, {0, -1}} ;
        int miniT = 0, cnt = 0 ;
        while(!q.empty()) {
            int sz = q.size() ;
            cnt += sz ;
            for(int k = 0; k < sz; k++) {
                pair<int, int> p = q.front() ; q.pop() ;
                int i = p.first, j = p.second ;
                for(auto& d : dir) {
                    int nx = i + d[0], ny = j + d[1] ;
                    if(nx >= 0 && nx < m && ny >= 0 && ny < n && grid[nx][ny] == 1) {
                        grid[nx][ny] = 2 ;
                        q.push({nx, ny}) ;
                    }
                }
            }
            if(!q.empty()) miniT++ ;
        }
        return all == cnt ? miniT : -1 ;
    }
};
