class Solution {
public:
    bool isPalindrome(const string &s, int i, int j) {
        while (i < j) {
            if (s[i] != s[j]) return false;
            i++ ;
            j-- ;
        }
        return true;
    }
    void backtrack(const string &s, int i, vector<string> &curr, vector<vector<string>> &res) {
        if (i >= s.size()) {
            res.push_back(curr);
            return;
        }
        for (int j = i; j < s.size(); j++) {
            if (isPalindrome(s, i, j)) {
                curr.push_back(s.substr(i, j - i + 1));
                backtrack(s, j + 1, curr, res);
                curr.pop_back();
            }
        }
    }
    vector<vector<string>> partition(string s) {
        vector<vector<string>> res;
        vector<string> curr;
        backtrack(s, 0, curr, res);
        return res;
    }
};
